import os
import logging
import json
import sqlite3
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.utils.exceptions import TerminatedByOtherGetUpdates
from datetime import datetime

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
DEFAULT_MODEL = "openchat/openchat-3.5-0106"  # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def init_db():
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users
                         (user_id INTEGER PRIMARY KEY,
                          data TEXT,
                          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    finally:
        if conn:
            conn.close()

init_db()

# --- –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
def get_user(user_id):
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("SELECT data FROM users WHERE user_id=?", (user_id,))
        result = cursor.fetchone()
        return json.loads(result[0]) if result else None
    except json.JSONDecodeError:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user_id={user_id}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None
    finally:
        if conn:
            conn.close()

def save_user(user_id, data):
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute(
            "REPLACE INTO users (user_id, data) VALUES (?, ?)",
            (user_id, json.dumps(data))
        )
        conn.commit()
        logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    finally:
        if conn:
            conn.close()

# --- –¢–æ–∫–µ–Ω—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
API_TOKEN = os.getenv("API_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_MODEL = os.getenv("OPENROUTER_MODEL", DEFAULT_MODEL)

if not API_TOKEN:
    logger.critical("–ù–µ —É–∫–∞–∑–∞–Ω API_TOKEN")
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ª—É—á–∏—Ç–µ —É @BotFather")

if not OPENROUTER_API_KEY:
    logger.critical("–ù–µ —É–∫–∞–∑–∞–Ω OPENROUTER_API_KEY")
    raise ValueError("‚ùå –ö–ª—é—á OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ openrouter.ai")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def start_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ù–∞—á–∞—Ç—å"))

def confirm_keyboard():
    return InlineKeyboardMarkup().add(InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="accept_terms"))

def option_keyboard(options):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for opt in options:
        kb.add(KeyboardButton(opt))
    return kb

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    try:
        await message.answer(
            "üö≠ NoSmoke Coach ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –æ—Ç–∫–∞–∑–µ –æ—Ç –∫—É—Ä–µ–Ω–∏—è\n\n"
            "‚úÖ –ü—Ä–∏–Ω–∏–º–∞—è —É—Å–ª–æ–≤–∏—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º](https://example.com).",
            reply_markup=start_keyboard(),
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {e}")

@dp.message_handler(lambda m: m.text == "–ù–∞—á–∞—Ç—å")
async def ask_terms(message: types.Message):
    try:
        await message.answer(
            "üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏:",
            reply_markup=confirm_keyboard(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ask_terms: {e}")

@dp.callback_query_handler(lambda c: c.data == 'accept_terms')
async def accepted_terms(c: types.CallbackQuery):
    try:
        user_id = c.from_user.id
        user_data = {
            "–¥–µ–Ω—å": 0,
            "–¥–∞—Ç–∞_—Å—Ç–∞—Ä—Ç–∞": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "—Å—Ç–∞—Ç—É—Å": "–Ω–∞—á–∞–ª –æ–ø—Ä–æ—Å"
        }
        save_user(user_id, user_data)
        
        await bot.answer_callback_query(c.id)
        await bot.send_message(
            user_id, 
            "1Ô∏è‚É£ –ö–∞–∫ –¥–∞–≤–Ω–æ –≤—ã –∫—É—Ä–∏—Ç–µ?", 
            reply_markup=option_keyboard(["–ú–µ–Ω—å—à–µ –≥–æ–¥–∞", "1‚Äì5 –ª–µ—Ç", "6‚Äì10 –ª–µ—Ç", "–ë–æ–ª—å—à–µ 10 –ª–µ—Ç"])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ accepted_terms: {e}")

@dp.message_handler(lambda m: m.text in ["–ú–µ–Ω—å—à–µ –≥–æ–¥–∞", "1‚Äì5 –ª–µ—Ç", "6‚Äì10 –ª–µ—Ç", "–ë–æ–ª—å—à–µ 10 –ª–µ—Ç"])
async def ask_cigs(message: types.Message):
    try:
        user_id = message.from_user.id
        user_data = get_user(user_id) or {}
        user_data["—Å—Ç–∞–∂"] = message.text
        save_user(user_id, user_data)
        
        await message.answer(
            "2Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ —Å–∏–≥–∞—Ä–µ—Ç –≤ –¥–µ–Ω—å –≤—ã –∫—É—Ä–∏—Ç–µ?",
            reply_markup=option_keyboard(["1‚Äì9", "10‚Äì14", "15‚Äì19", "20 –∏ –±–æ–ª—å—à–µ"])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ask_cigs: {e}")

@dp.message_handler(lambda m: m.text in ["1‚Äì9", "10‚Äì14", "15‚Äì19", "20 –∏ –±–æ–ª—å—à–µ"])
async def ask_type(message: types.Message):
    try:
        user_id = message.from_user.id
        user_data = get_user(user_id) or {}
        
        if "–∏ –±–æ–ª—å—à–µ" in message.text:
            user_data["—Å–∏–≥–∞—Ä–µ—Ç_–≤_–¥–µ–Ω—å"] = 20
        else:
            user_data["—Å–∏–≥–∞—Ä–µ—Ç_–≤_–¥–µ–Ω—å"] = int(message.text.split("‚Äì")[0])
            
        save_user(user_id, user_data)
        await message.answer(
            "3Ô∏è‚É£ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –∫—É—Ä–∏—Ç–µ —á–∞—â–µ –≤—Å–µ–≥–æ?",
            reply_markup=option_keyboard(["–°–∏–≥–∞—Ä–µ—Ç—ã", "–í–µ–π–ø", "–ê–π–∫–æ—Å/—Å—Ç–∏–∫–∏", "–í—Å—ë –ø–æ–Ω–µ–º–Ω–æ–≥—É"])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ask_type: {e}")

@dp.message_handler(lambda m: m.text in ["–°–∏–≥–∞—Ä–µ—Ç—ã", "–í–µ–π–ø", "–ê–π–∫–æ—Å/—Å—Ç–∏–∫–∏", "–í—Å—ë –ø–æ–Ω–µ–º–Ω–æ–≥—É"])
async def ask_attempts(message: types.Message):
    try:
        user_id = message.from_user.id
        user_data = get_user(user_id) or {}
        user_data["—Ç–∏–ø"] = message.text
        save_user(user_id, user_data)
        
        await message.answer(
            "4Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —É–∂–µ –ø—ã—Ç–∞–ª–∏—Å—å –±—Ä–æ—Å–∏—Ç—å?",
            reply_markup=option_keyboard(["–ù–∏ —Ä–∞–∑—É", "1‚Äì2", "3‚Äì5", "–ë–æ–ª—å—à–µ 5", "–ë—Ä–æ—Å–∞–ª(–∞), –Ω–æ —Å–æ—Ä–≤–∞–ª—Å—è(–∞—Å—å)"])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ask_attempts: {e}")

@dp.message_handler(lambda m: m.text in ["–ù–∏ —Ä–∞–∑—É", "1‚Äì2", "3‚Äì5", "–ë–æ–ª—å—à–µ 5", "–ë—Ä–æ—Å–∞–ª(–∞), –Ω–æ —Å–æ—Ä–≤–∞–ª—Å—è(–∞—Å—å)"])
async def start_day_one(message: types.Message):
    try:
        user_id = message.from_user.id
        user_data = get_user(user_id) or {}
        user_data.update({
            "–¥–µ–Ω—å": 1,
            "—Å—Ç–∞—Ä—Ç": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "–Ω–µ_–≤—ã–∫—É—Ä–µ–Ω–æ": 0,
            "—ç–∫–æ–Ω–æ–º–∏—è": 0,
            "–ø–æ–ø—ã—Ç–∫–∏": message.text
        })
        save_user(user_id, user_data)
        
        await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!")
        await message.answer(
            "üìÖ –î–µ–Ω—å 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏\n\n"
            "‚úçÔ∏è –ó–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–µ—à–∏–ª–∏ –±—Ä–æ—Å–∏—Ç—å –∫—É—Ä–∏—Ç—å.\n"
            "üìò –ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–∞–∂–º–∏—Ç–µ SOS, –µ—Å–ª–∏ —Ç—è–∂–µ–ª–æ.",
            reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(
                KeyboardButton("üö® SOS"),
                KeyboardButton("üë• –ó–∞–ø–∏—Å—å –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É")
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_day_one: {e}")

@dp.message_handler(lambda m: m.text == "üö® SOS")
async def sos_help(message: types.Message):
    try:
        await message.answer("üß† –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ OpenRouter –æ—Ç {message.from_user.id}, –º–æ–¥–µ–ª—å: {OPENROUTER_MODEL}")
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            }
            payload = {
                "model": OPENROUTER_MODEL,
                "messages": [
                    {"role": "system", "content": "–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥, –ø–æ–º–æ–≥–∞—é—â–∏–π –±—Ä–æ—Å–∏—Ç—å –∫—É—Ä–∏—Ç—å."},
                    {"role": "user", "content": "–ú–Ω–µ —Ö–æ—á–µ—Ç—Å—è –∫—É—Ä–∏—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å?"}
                ]
            }
            
            async with session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=payload
            ) as resp:
                if resp.status != 200:
                    error = await resp.text()
                    logger.error(f"OpenRouter error: {error}")
                    await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return
                
                data = await resp.json()
                answer = data['choices'][0]['message']['content']
                await message.answer(f"üëè –û—Ç–≤–µ—Ç:\n{answer}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ sos_help: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        executor.start_polling(dp, skip_updates=True)
    except TerminatedByOtherGetUpdates:
        logger.error("–û—à–∏–±–∫–∞: —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞!")
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
