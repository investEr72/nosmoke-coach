import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from datetime import datetime

# --- Logging ---
logging.basicConfig(level=logging.INFO)

# --- Tokens ---
API_TOKEN = os.getenv("API_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

if not API_TOKEN or not OPENROUTER_API_KEY:
    raise ValueError("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è API_TOKEN –∏–ª–∏ OPENROUTER_API_KEY")

# --- Bot ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
user_data = {}

# --- Keyboards ---
def start_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ù–∞—á–∞—Ç—å"))
    return kb

def confirm_keyboard():
    ikb = InlineKeyboardMarkup()
    ikb.add(InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="accept_terms"))
    return ikb

def option_keyboard(options):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for opt in options:
        kb.add(KeyboardButton(opt))
    return kb

# --- Handlers ---
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?\n"
        "NoSmoke Coach ‚Äî —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –ø—É—Ç–∏ –∫ —Å–≤–æ–±–æ–¥–µ –æ—Ç –∫—É—Ä–µ–Ω–∏—è.\n\n"
        "üß† –ù–∞—É—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (CBT, –º–æ—Ç–∏–≤–∞—Ü–∏—è, –¥—ã—Ö–∞–Ω–∏–µ)\n"
        "üß© –ü—Ä–æ–≥—Ä–∞–º–º–∞ 45 –¥–Ω–µ–π —Å –∑–∞–¥–∞–Ω–∏—è–º–∏\n"
        "ü§ñ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ 24/7\n"
        "üö® –ö–Ω–æ–ø–∫–∞ SOS\n"
        "ü™û –†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å\n"
        "üìä –£—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "‚è±Ô∏è –í—Å–µ–≥–æ 10‚Äì15 –º–∏–Ω –≤ –¥–µ–Ω—å (–º–µ–Ω—å—à–µ, —á–µ–º –Ω–∞ —Å–∏–≥–∞—Ä–µ—Ç—ã)\n"
        "üéÅ –ë–æ–Ω—É—Å: –∑–∞–ø–∏—Å—å –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É 20 –º–∏–Ω (1000‚ÇΩ / $10)\n\n"
        "üí¨ –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è /start\n"
        "üìÖ –ü–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∑–∞—Ç–µ–º 1790‚ÇΩ –∏–ª–∏ 17,9 USDT (—Ä–∞–∑–æ–≤–æ)\n\n"
        "‚úÖ –û—Ç–≤–µ—á–∞—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –Ω–∞—á–∏–Ω–∞—è –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å, –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è](https://drive.google.com/file/d/1BNAdSPYoec5faELaqt5gNYVdCoUy93k7/view?usp=sharing).",
        reply_markup=start_keyboard(),
        parse_mode="Markdown"
    )

@dp.message_handler(lambda m: m.text == "–ù–∞—á–∞—Ç—å")
async def ask_terms(message: types.Message):
    await message.answer(
        "üìÑ –ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏.\n\n"
        "–í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º](https://drive.google.com/file/d/1BNAdSPYoec5faELaqt5gNYVdCoUy93k7/view?usp=sharing).",
        reply_markup=confirm_keyboard(),
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data == 'accept_terms')
async def accepted_terms(c: types.CallbackQuery):
    user_id = c.from_user.id
    user_data[user_id] = {"–¥–µ–Ω—å": 0, "–¥–∞—Ç–∞_—Å—Ç–∞—Ä—Ç–∞": datetime.now()}
    await bot.answer_callback_query(c.id)
    await bot.send_message(user_id, "1Ô∏è‚É£ –ö–∞–∫ –¥–∞–≤–Ω–æ –≤—ã –∫—É—Ä–∏—Ç–µ?", reply_markup=option_keyboard([
        "–ú–µ–Ω—å—à–µ –≥–æ–¥–∞", "1‚Äì5 –ª–µ—Ç", "6‚Äì10 –ª–µ—Ç", "–ë–æ–ª—å—à–µ 10 –ª–µ—Ç"
    ]))

@dp.message_handler(lambda m: m.text in ["–ú–µ–Ω—å—à–µ –≥–æ–¥–∞", "1‚Äì5 –ª–µ—Ç", "6‚Äì10 –ª–µ—Ç", "–ë–æ–ª—å—à–µ 10 –ª–µ—Ç"])
async def ask_cigs(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]['—Å—Ç–∞–∂'] = message.text
    await message.answer("2Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ —Å–∏–≥–∞—Ä–µ—Ç –≤ –¥–µ–Ω—å –≤—ã –∫—É—Ä–∏—Ç–µ?", reply_markup=option_keyboard([
        "1‚Äì9", "10‚Äì14", "15‚Äì19", "20 –∏ –±–æ–ª—å—à–µ"
    ]))

@dp.message_handler(lambda m: m.text in ["1‚Äì9", "10‚Äì14", "15‚Äì19", "20 –∏ –±–æ–ª—å—à–µ"])
async def ask_type(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]['–∫–æ–ª-–≤–æ'] = message.text
    try:
        user_data[user_id]['—Å–∏–≥–∞—Ä–µ—Ç_–≤_–¥–µ–Ω—å'] = int(message.text.split("‚Äì")[0])
    except Exception:
        user_data[user_id]['—Å–∏–≥–∞—Ä–µ—Ç_–≤_–¥–µ–Ω—å'] = 20
    await message.answer("3Ô∏è‚É£ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –∫—É—Ä–∏—Ç–µ —á–∞—â–µ –≤—Å–µ–≥–æ?", reply_markup=option_keyboard([
        "–°–∏–≥–∞—Ä–µ—Ç—ã", "–í–µ–π–ø", "–ê–π–∫–æ—Å / —Å—Ç–∏–∫–∏", "–í—Å—ë –ø–æ–Ω–µ–º–Ω–æ–≥—É"
    ]))

@dp.message_handler(lambda m: m.text in ["–°–∏–≥–∞—Ä–µ—Ç—ã", "–í–µ–π–ø", "–ê–π–∫–æ—Å / —Å—Ç–∏–∫–∏", "–í—Å—ë –ø–æ–Ω–µ–º–Ω–æ–≥—É"])
async def ask_attempts(message: types.Message):
    user_data[message.from_user.id]['—Ç–∏–ø'] = message.text
    await message.answer("4Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —É–∂–µ –ø—ã—Ç–∞–ª–∏—Å—å –±—Ä–æ—Å–∏—Ç—å?", reply_markup=option_keyboard([
        "–ù–∏ —Ä–∞–∑—É", "1‚Äì2", "3‚Äì5", "–ë–æ–ª—å—à–µ 5", "–ë—Ä–æ—Å–∞–ª(–∞), –Ω–æ —Å–æ—Ä–≤–∞–ª—Å—è(–∞—Å—å)"
    ]))

@dp.message_handler(lambda m: m.text in ["–ù–∏ —Ä–∞–∑—É", "1‚Äì2", "3‚Äì5", "–ë–æ–ª—å—à–µ 5", "–ë—Ä–æ—Å–∞–ª(–∞), –Ω–æ —Å–æ—Ä–≤–∞–ª—Å—è(–∞—Å—å)"])
async def start_day_one(message: types.Message):
    user_data[message.from_user.id]['–ø–æ–ø—ã—Ç–∫–∏'] = message.text
    user_data[message.from_user.id].update({
        '–¥–µ–Ω—å': 1, '—Å—Ç–∞—Ä—Ç': datetime.now(), '–Ω–µ_–≤—ã–∫—É—Ä–µ–Ω–æ': 0, '—ç–∫–æ–Ω–æ–º–∏—è': 0
    })
    await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!")
    await message.answer(
        "üìÖ –î–µ–Ω—å 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏\n\n"
        "‚úçÔ∏è –ó–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–µ—à–∏–ª–∏ –±—Ä–æ—Å–∏—Ç—å –∫—É—Ä–∏—Ç—å.\n"
        "–≠—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã–¥–µ—Ä–∂–∞—Ç—å –ø–µ—Ä–≤—ã–µ –¥–Ω–∏.\n\n"
        "üìò –ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–∞–∂–º–∏—Ç–µ SOS, –µ—Å–ª–∏ —Ç—è–∂–µ–ª–æ.",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(
            KeyboardButton("üö® SOS"),
            KeyboardButton("üë• –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É")
        )
    )

import aiohttp  # –¥–æ–±–∞–≤—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª

@dp.message_handler(lambda m: m.text == "üö® SOS")
async def sos_help(message: types.Message):
    await message.answer("üß† –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            }
            payload = {
                "model": "openchat/openchat-3.5",  # ‚úÖ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
                "messages": [
                    {"role": "system", "content": "–¢—ã –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –ø–æ–º–æ–≥–∞—é—â–∏–π –±—Ä–æ—Å–∏—Ç—å –∫—É—Ä–∏—Ç—å."},
                    {"role": "user", "content": "–ú–Ω–µ —Ö–æ—á–µ—Ç—Å—è –∫—É—Ä–∏—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å?"}
                ]
            }
            async with session.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=payload) as resp:
                data = await resp.json()

                if 'choices' in data and len(data['choices']) > 0:
                    answer = data['choices'][0]['message']['content']
                    await message.answer(f"üëè –û—Ç–≤–µ—Ç:\n{answer}")
                else:
                    await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenRouter:\n{data.get('error', '–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è choices')}")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    executor.start_polling(dp, skip_updates=True)

